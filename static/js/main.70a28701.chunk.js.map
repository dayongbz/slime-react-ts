{"version":3,"sources":["components/Dot.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Dot","memo","props","useState","dots","setDots","dotRef","useRef","onMouseEnter","e","current","classList","remove","add","useEffect","dot","x","offsetLeft","offsetWidth","y","offsetTop","offsetHeight","ctx","colorData","getImageData","data","style","backgroundColor","clientWidth","addEventListener","once","size","ref","className","width","height","map","item","key","toString","App","name","initialDotSize","setInitialDotSize","setScreenSize","ctxState","setCtxState","dotWrapperRef","canvasRef","window","innerWidth","innerHeight","id","onLoad","target","canvas","getContext","img","drawImage","imgWidth","imgHeight","dotWrapper","setDotWrapper","alt","src","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.70a28701.chunk.js","sourcesContent":["import React, { useRef, useEffect, useState, memo } from \"react\";\n\nconst Dot = memo((props: any) => {\n  const [dots, setDots] = useState<Array<any>>([]);\n  const dotRef = useRef<HTMLDivElement>(null);\n\n  const onMouseEnter = (e: any) => {\n    if (dotRef.current && e) {\n      dotRef.current.classList.remove(\"dot\");\n      dotRef.current.classList.add(\"wrapper\");\n      setDots([1, 2, 3, 4]);\n    }\n  };\n\n  useEffect(() => {}, []);\n\n  useEffect(() => {\n    if (dotRef.current) {\n      const dot = dotRef.current;\n      const x = dot.offsetLeft + dot.offsetWidth / 2,\n        y = dot.offsetTop + dot.offsetHeight / 2;\n      if (props.ctx) {\n        const colorData = props.ctx.getImageData(x, y, 1, 1).data;\n        dot.style.backgroundColor = `rgb(${colorData[0]},${colorData[1]},${colorData[2]})`;\n      }\n      if (dot.clientWidth >= 20) {\n        dot.addEventListener(\"mouseenter\", onMouseEnter, { once: true });\n      }\n    }\n  }, [props.size, props.ctx]);\n  return (\n    <div\n      ref={dotRef}\n      className=\"dot\"\n      style={{ width: props.size, height: props.size }}\n    >\n      {dots.map((item) => {\n        return (\n          <Dot size={props.size / 2} key={item.toString()} ctx={props.ctx} />\n        );\n      })}\n    </div>\n  );\n});\n\nexport default Dot;\n","import React, { useState, useRef, memo, useEffect } from \"react\";\nimport \"./reset.css\";\nimport \"./App.css\";\nimport Dot from \"./components/Dot\";\n\nconst App = () => {\n  const [name, setName] = useState<string>(\"chaewon\");\n  const [initialDotSize, setInitialDotSize] = useState<number>(0);\n  const [screenSize, setScreenSize] = useState<object>({ width: 0, height: 0 });\n  const [ctxState, setCtxState] = useState<CanvasRenderingContext2D>();\n  const dotWrapperRef = useRef<HTMLDivElement>(null);\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n\n  const setDotWrapper = (imgWidth: number, imgHeight: number) => {\n    if (dotWrapperRef.current) {\n      const dotWrapper = dotWrapperRef.current as HTMLDivElement;\n      dotWrapper.style.width = `${imgWidth}px`;\n      dotWrapper.style.height = `${imgHeight}px`;\n    }\n  };\n\n  const imgOnLoad = (e: any) => {\n    if (canvasRef.current && e.target) {\n      const canvas = canvasRef.current as HTMLCanvasElement;\n      const ctx = canvas.getContext(\"2d\") as CanvasRenderingContext2D;\n      setCtxState(ctx);\n      const img = e.target as HTMLImageElement;\n      const { width, height } = img;\n      canvas.width = width;\n      canvas.height = height;\n      ctx.drawImage(img, 0, 0, width, height);\n      setDotWrapper(width, height);\n      setInitialDotSize(350);\n    }\n  };\n\n  useEffect(() => {\n    setScreenSize({\n      width: window.innerWidth,\n      height: window.innerHeight,\n    });\n    window.addEventListener(\"resize\", () => {\n      setScreenSize({\n        width: window.innerWidth,\n        height: window.innerHeight,\n      });\n    });\n  }, []);\n\n  return (\n    <div id=\"main-wrapper\">\n      <img onLoad={imgOnLoad} alt=\"chaewon\" src={`/img/${name}.jpg`}></img>\n      <canvas ref={canvasRef}></canvas>\n      <div ref={dotWrapperRef} className=\"wrapper\" id=\"dot-wrapper\">\n        {[1, 2, 3, 4, 5, 6].map((item) => (\n          <Dot size={initialDotSize} ctx={ctxState} key={item.toString()} />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import \"react-app-polyfill/ie11\";\nimport \"react-app-polyfill/stable\";\n\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}