{"version":3,"sources":["components/Dot.tsx","components/Canvas.tsx","components/CanvasWrapper.tsx","components/Profile.tsx","components/ProfileWrapper.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Dot","memo","ctx","size","name","useState","dots","setDots","dotRef","useRef","onMouseEnter","e","current","classList","remove","add","useEffect","dot","x","offsetLeft","offsetWidth","y","offsetTop","offsetHeight","colorData","getImageData","data","style","backgroundColor","clientWidth","addEventListener","once","ref","className","width","height","map","item","key","toString","Canvas","CanvasWrapper","member","id","Profile","setName","select","onClick","backgroundImage","ProfileWrapper","App","initialDotSize","setInitialDotSize","initialDots","setInitialDots","screenSize","setScreenSize","ctxState","setCtxState","memberRef","dotWrapperRef","canvasRef","imgRef","settingInit","canvas","img","getWidthHeight","getContext","drawImage","setCanvas","imgWidth","imgHeight","dotWrapper","setDotWrapper","onReSize","window","innerWidth","innerHeight","onLoad","alt","src","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.29703f4c.chunk.js","sourcesContent":["import React, { useRef, useEffect, useState, memo } from \"react\";\n\nconst Dot = memo(({ ctx, size, name }: any) => {\n  const [dots, setDots] = useState<Array<any>>([]);\n  const dotRef = useRef<HTMLDivElement>(null);\n\n  const onMouseEnter = (e: any) => {\n    // element what has dot class remove dot class then add wrapper class\n    if (dotRef.current && e) {\n      dotRef.current.classList.remove(\"dot\");\n      dotRef.current.classList.add(\"wrapper\");\n      setDots([1, 2, 3, 4]);\n    }\n  };\n\n  useEffect(() => {\n    // init dot setting\n    if (dotRef.current && ctx) {\n      const dot = dotRef.current;\n      let x = dot.offsetLeft + dot.offsetWidth / 2,\n        y = dot.offsetTop + dot.offsetHeight / 2;\n      const colorData = ctx.getImageData(x, y, 1, 1).data;\n      dot.style.backgroundColor = `rgb(${colorData[0]},${colorData[1]},${colorData[2]})`;\n      if (dot.clientWidth >= 10) {\n        dot.addEventListener(\"mouseenter\", onMouseEnter, { once: true });\n      }\n    }\n  }, [size, ctx, name]);\n  return (\n    <div ref={dotRef} className=\"dot\" style={{ width: size, height: size }}>\n      {dots.map((item) => {\n        return (\n          <Dot size={size / 2} key={item.toString()} ctx={ctx} name={name} />\n        );\n      })}\n    </div>\n  );\n});\n\nexport default Dot;\n","import React, { memo } from \"react\";\n\nconst Canvas = memo(({ name }: any) => {\n  return <canvas className={name} key={name}></canvas>;\n});\n\nexport default Canvas;\n","import React, { memo } from \"react\";\nimport Canvas from \"./Canvas\";\n\nconst CanvasWrapper = memo(({ member }: any) => {\n  return (\n    <div id=\"canvas-wrapper\">\n      {member.map((item: string) => {\n        return <Canvas className={item} key={item}></Canvas>;\n      })}\n    </div>\n  );\n});\n\nexport default CanvasWrapper;\n","import React, { memo } from \"react\";\n\nconst Profile = memo(({ name, setName, select }: any) => {\n  const onClick = (e: any) => {\n    setName(name);\n  };\n  return (\n    <div\n      onClick={onClick}\n      className={select ? \"profile selected\" : \"profile\"}\n      style={{ backgroundImage: `url(./img/${name}.jpg)` }}\n    ></div>\n  );\n});\n\nexport default Profile;\n","import React, { memo } from \"react\";\nimport Profile from \"./Profile\";\n\nconst ProfileWrapper = memo(({ member, setName, name }: any) => {\n  return (\n    <div id=\"profile-wrapper\">\n      {member.map((item: any) => {\n        if (item === name) {\n          return (\n            <Profile\n              name={item}\n              key={item}\n              setName={setName}\n              select={true}\n            ></Profile>\n          );\n        }\n        return <Profile name={item} key={item} setName={setName}></Profile>;\n      })}\n    </div>\n  );\n});\n\nexport default ProfileWrapper;\n","import React, { useState, useRef, memo, useEffect } from \"react\";\nimport \"./reset.css\";\nimport \"./App.css\";\nimport Dot from \"./components/Dot\";\nimport CanvasWrapper from \"./components/CanvasWrapper\";\nimport ProfileWrapper from \"./components/ProfileWrapper\";\n\nconst App = memo(() => {\n  const [name, setName] = useState<string>(\"kimchaewon\");\n  const [initialDotSize, setInitialDotSize] = useState<number>(0);\n  const [initialDots, setInitialDots] = useState<Array<number>>([]);\n  const [screenSize, setScreenSize] = useState<Array<number>>([0, 0]);\n  const [ctxState, setCtxState] = useState<CanvasRenderingContext2D>();\n  const memberRef = useRef<Array<string>>([\n    \"kwoneunbi\",\n    \"sakura\",\n    \"kanghyewon\",\n    \"choiyena\",\n    \"leechaeyeon\",\n    \"kimchaewon\",\n    \"kimminju\",\n    \"nako\",\n    \"hitomi\",\n    \"joyuri\",\n    \"anyujin\",\n    \"jangwonyoung\",\n  ]);\n  const dotWrapperRef = useRef<HTMLDivElement>(null);\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const imgRef = useRef<HTMLImageElement>(null);\n\n  const setCanvas = (\n    // set canvas size and draw image and return ctx\n    canvas: HTMLCanvasElement,\n    img: HTMLImageElement,\n    width: number,\n    height: number\n  ): CanvasRenderingContext2D => {\n    const ctx = canvas.getContext(\"2d\") as CanvasRenderingContext2D;\n    canvas.width = width;\n    canvas.height = height;\n    ctx.drawImage(img, 0, 0, width, height);\n    setCtxState(ctx);\n    return ctx;\n  };\n\n  const setDotWrapper = (imgWidth: number, imgHeight: number) => {\n    // set dot-wrapper size\n    if (dotWrapperRef.current) {\n      const dotWrapper = dotWrapperRef.current as HTMLDivElement;\n      dotWrapper.style.width = `${imgWidth}px`;\n      dotWrapper.style.height = `${imgHeight}px`;\n      setInitialDots([1, 2, 3, 4, 5, 6]);\n    }\n  };\n\n  const getWidthHeight = (img: HTMLImageElement) => {\n    let { width, height } = img;\n    if (width < height) {\n      if (width > screenSize[0] * 0.8) {\n        height = (height / width) * screenSize[0] * 0.8;\n        width = screenSize[0] * 0.8;\n      }\n      // if (height > screenSize[1] * 0.5) {\n      //   width = (width / height) * screenSize[1] * 0.5;\n      //   height = screenSize[1] * 0.5;\n      // }\n    } else if (width > height) {\n    }\n\n    return { width, height };\n  };\n\n  const settingInit = () => {\n    if (canvasRef.current && imgRef.current) {\n      const canvas = canvasRef.current as HTMLCanvasElement;\n      const img = imgRef.current as HTMLImageElement;\n      const size = getWidthHeight(img);\n      setCanvas(canvas, img, size.width, size.height);\n      setDotWrapper(size.width, size.height);\n      setInitialDotSize(350);\n    }\n  };\n\n  const imgOnLoad = () => {\n    // when img is loaded, init system\n    settingInit();\n  };\n\n  const onReSize = () => {\n    setScreenSize([window.innerWidth, window.innerHeight]);\n  };\n\n  useEffect(() => {\n    // when document is loaded, set screenSize state at once\n    onReSize();\n    window.addEventListener(\"resize\", onReSize);\n  }, []);\n\n  return (\n    <>\n      <CanvasWrapper member={memberRef.current}></CanvasWrapper>\n      <div id=\"main-wrapper\">\n        <img\n          onLoad={imgOnLoad}\n          alt=\"chaewon\"\n          src={`./img/${name}.jpg`}\n          ref={imgRef}\n        ></img>\n        <canvas ref={canvasRef}></canvas>\n        <div ref={dotWrapperRef} className=\"wrapper\" id=\"dot-wrapper\">\n          {initialDots.map((item) => (\n            <Dot\n              size={initialDotSize}\n              ctx={ctxState}\n              key={item.toString()}\n              name={name}\n            />\n          ))}\n        </div>\n      </div>\n      <ProfileWrapper\n        member={memberRef.current}\n        setName={setName}\n        name={name}\n      ></ProfileWrapper>\n    </>\n  );\n});\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import \"react-app-polyfill/ie11\";\nimport \"react-app-polyfill/stable\";\n\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}