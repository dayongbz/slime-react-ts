{"version":3,"sources":["components/Dot.tsx","tools/getWidthHeight.tsx","components/CanvasImg.tsx","components/CanvasImgWrapper.tsx","components/Profile.tsx","components/ProfileWrapper.tsx","tools/getDotsCount.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Dot","memo","ctx","size","name","wrapperSize","useState","dots","setDots","dotRef","useRef","useEffect","current","dot","x","offsetLeft","offsetWidth","y","offsetTop","offsetHeight","colorData","getImageData","data","style","backgroundColor","ref","className","width","height","onMouseEnter","e","target","clientWidth","classList","remove","add","map","item","key","toString","getWidthHeight","img","screenSize","maxWidth","maxHeight","ratio","result","padding","CanvasImg","dispatch","canvasRef","imgRef","setCanvas","canvas","getContext","drawImage","type","onLoad","alt","src","CanvasImgWrapper","member","id","Profile","select","onClick","backgroundImage","ProfileWrapper","getDotsCount","dotSize","Math","ceil","initialState","imgCtx","dotWrapperSize","initDotsCount","reducer","state","action","App","useReducer","memberRef","dotWrapperRef","onReSize","window","innerWidth","innerHeight","dotsCount","imgWidth","imgHeight","dotWrapper","setDotWrapper","i","push","makeInitDots","addEventListener","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.866c98b8.chunk.js","sourcesContent":["import React, { useRef, useEffect, useState, memo } from \"react\";\n\nconst Dot = memo(({ ctx, size, name, wrapperSize }: any) => {\n  const [dots, setDots] = useState<Array<any>>([]);\n  const dotRef = useRef<HTMLDivElement>(null);\n\n  const onMouseEnter = (e: any) => {\n    // element what has dot class remove dot class then add wrapper class\n    const target = dotRef.current;\n    if (target && target.clientWidth >= 10) {\n      if (dotRef.current) {\n        dotRef.current.classList.remove(\"dot\");\n        dotRef.current.classList.add(\"wrapper\");\n        setDots([1, 2, 3, 4]);\n      }\n    }\n  };\n\n  useEffect(() => {\n    // init dot setting\n    if (dotRef.current && ctx && wrapperSize) {\n      const dot = dotRef.current;\n      let x = dot.offsetLeft + dot.offsetWidth / 2,\n        y = dot.offsetTop + dot.offsetHeight / 2;\n      x = x < 0 ? 0 : x > wrapperSize[0] ? wrapperSize[0] - 1 : x;\n      y = y < 0 ? 0 : y > wrapperSize[1] ? wrapperSize[1] - 1 : y;\n      const colorData = ctx.getImageData(x, y, 1, 1).data;\n      dot.style.backgroundColor = `rgb(${colorData[0]},${colorData[1]},${colorData[2]})`;\n    }\n  }, [ctx, name, wrapperSize]);\n\n  return (\n    <div\n      ref={dotRef}\n      className=\"dot\"\n      style={{ width: size, height: size }}\n      onMouseEnter={onMouseEnter}\n    >\n      {dots.map((item) => {\n        return (\n          <Dot\n            size={size / 2}\n            key={item.toString()}\n            ctx={ctx}\n            name={name}\n            wrapperSize={wrapperSize}\n          />\n        );\n      })}\n    </div>\n  );\n});\n\nexport default Dot;\n","const getWidthHeight = (img: HTMLImageElement, screenSize: any): any => {\n  let { width, height } = img;\n  let [maxWidth, maxHeight] = screenSize;\n  const ratio = width >= height ? width / height : height / width;\n  const profileHeight = 125;\n  const padding = 10;\n  const result: any = { width: 0, height: 0 };\n  maxWidth = maxWidth - padding * 2;\n  maxHeight = maxHeight - padding * 2 - profileHeight;\n  if (width >= height) {\n    result.width = maxWidth;\n    result.height = maxWidth / ratio;\n    if (result.height > maxHeight) {\n      result.width = maxWidth - (result.height - maxHeight) * ratio;\n      result.height = maxHeight;\n    }\n  } else {\n    result.width = maxHeight / ratio;\n    result.height = maxHeight;\n    if (result.width > maxWidth) {\n      result.height = maxHeight - (result.width - maxWidth) * ratio;\n      result.width = maxWidth;\n    }\n  }\n  return result;\n};\n\nexport default getWidthHeight;\n","import React, { memo, useRef, useEffect } from \"react\";\nimport getWidthHeight from \"../tools/getWidthHeight\";\n\nconst CanvasImg = memo(({ name, screenSize, dispatch }: any) => {\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const imgRef = useRef<HTMLImageElement>(null);\n\n  const setCanvas = (\n    // set canvas size and draw image and return ctx\n    canvas: HTMLCanvasElement,\n    img: HTMLImageElement,\n    width: number,\n    height: number\n  ): CanvasRenderingContext2D => {\n    const ctx = canvas.getContext(\"2d\") as CanvasRenderingContext2D;\n    canvas.width = width;\n    canvas.height = height;\n    ctx.drawImage(img, 0, 0, width, height);\n    return ctx;\n  };\n\n  const onLoad = (e: any) => {\n    if (canvasRef.current && e.target) {\n      const canvas = canvasRef.current as HTMLCanvasElement;\n      const img = e.target;\n      const size = getWidthHeight(img, screenSize);\n      const ctx = setCanvas(canvas, img, size.width, size.height);\n      dispatch({ type: \"SET_IMG_CTX\", name, ctx, img });\n    }\n  };\n\n  useEffect(() => {\n    if (canvasRef.current && imgRef.current) {\n      const canvas = canvasRef.current as HTMLCanvasElement;\n      const img = imgRef.current;\n      const size = getWidthHeight(img, screenSize);\n      const ctx = setCanvas(canvas, img, size.width, size.height);\n      dispatch({ type: \"SET_IMG_CTX\", name, ctx, img });\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [screenSize, name]);\n\n  return (\n    <div className={`${name}-wrapper`}>\n      <img\n        ref={imgRef}\n        onLoad={onLoad}\n        className={name}\n        alt={name}\n        src={`./img/${name}.jpg`}\n      />\n      <canvas ref={canvasRef} className={name}></canvas>\n    </div>\n  );\n});\n\nexport default CanvasImg;\n","import React, { memo } from \"react\";\nimport CanvasImg from \"./CanvasImg\";\n\nconst CanvasImgWrapper = memo(({ member, screenSize, dispatch }: any) => {\n  return (\n    <div id=\"canvas-wrapper\">\n      {member.map((item: string) => {\n        return (\n          <CanvasImg\n            name={item}\n            key={item}\n            screenSize={screenSize}\n            dispatch={dispatch}\n          />\n        );\n      })}\n    </div>\n  );\n});\n\nexport default CanvasImgWrapper;\n","import React, { memo } from \"react\";\n\nconst Profile = memo(({ name, dispatch, select }: any) => {\n  const onClick = (e: any) => {\n    dispatch({ type: \"SET_NAME\", name });\n  };\n  return (\n    <div\n      onClick={onClick}\n      className={select ? \"profile selected\" : \"profile\"}\n      style={{ backgroundImage: `url(./img/${name}.jpg)` }}\n    ></div>\n  );\n});\n\nexport default Profile;\n","import React, { memo } from \"react\";\nimport Profile from \"./Profile\";\n\nconst ProfileWrapper = memo(({ member, dispatch, name }: any) => {\n  return (\n    <div id=\"profile-wrapper\">\n      <div id=\"profile-slide\">\n        {member.map((item: any) => (\n          <Profile\n            name={item}\n            key={item}\n            dispatch={dispatch}\n            select={item === name}\n          ></Profile>\n        ))}\n      </div>\n    </div>\n  );\n});\n\nexport default ProfileWrapper;\n","const getDotsCount = (size: any, dotSize: number): number => {\n  const { height } = size;\n  return Math.ceil(height / dotSize) * 2;\n};\n\nexport default getDotsCount;\n","import React, { useRef, memo, useEffect, useReducer } from \"react\";\nimport \"./reset.css\";\nimport \"./App.css\";\nimport Dot from \"./components/Dot\";\nimport CanvasImgWrapper from \"./components/CanvasImgWrapper\";\nimport ProfileWrapper from \"./components/ProfileWrapper\";\nimport getWidthHeight from \"./tools/getWidthHeight\";\nimport getDotsCount from \"./tools/getDotsCount\";\n\nconst initialState = {\n  name: \"kimchaewon\",\n  imgCtx: {},\n  dotSize: 0,\n  screenSize: [0, 0],\n  dotWrapperSize: [0, 0],\n  initDotsCount: [],\n};\n\nconst reducer = (state: any, action: any) => {\n  switch (action.type) {\n    case \"SET_NAME\":\n      return { ...state, name: action.name };\n    case \"SET_IMG_CTX\":\n      return {\n        ...state,\n        imgCtx: {\n          ...state.imgCtx,\n          [action.name]: { ctx: action.ctx, img: action.img },\n        },\n      };\n    case \"SET_DOT_SIZE\":\n      return { ...state, dotSize: action.dotSize };\n    case \"SET_SCREEN_SIZE\":\n      return { ...state, screenSize: [...action.size] };\n    case \"SET_DOT_WRAPPER_SIZE\":\n      return { ...state, dotWrapperSize: [...action.size] };\n    case \"SET_INIT_DOTS_COUNT\":\n      return { ...state, initDotsCount: [...action.initDotsCount] };\n    default:\n      return state;\n  }\n};\n\nconst App = memo(() => {\n  const [state, dispatch] = useReducer(reducer, initialState);\n  const memberRef = useRef<Array<string>>([\n    \"kwoneunbi\",\n    \"sakura\",\n    \"kanghyewon\",\n    \"choiyena\",\n    \"leechaeyeon\",\n    \"kimchaewon\",\n    \"kimminju\",\n    \"nako\",\n    \"hitomi\",\n    \"joyuri\",\n    \"anyujin\",\n    \"jangwonyoung\",\n  ]);\n  const dotWrapperRef = useRef<HTMLDivElement>(null);\n\n  const setDotWrapper = (imgWidth: number, imgHeight: number) => {\n    // set dot-wrapper size\n    if (dotWrapperRef.current) {\n      const dotWrapper = dotWrapperRef.current as HTMLDivElement;\n      dotWrapper.style.width = `${imgWidth}px`;\n      dotWrapper.style.height = `${imgHeight}px`;\n      dispatch({\n        type: \"SET_DOT_WRAPPER_SIZE\",\n        size: [imgWidth, imgHeight],\n      });\n    }\n  };\n\n  const makeInitDots = (dotsCount: number) => {\n    const initDotsCount = [];\n    for (let i = 0; i < dotsCount; i++) {\n      initDotsCount.push(i);\n    }\n    dispatch({\n      type: \"SET_INIT_DOTS_COUNT\",\n      initDotsCount,\n    });\n  };\n\n  const onReSize = () => {\n    dispatch({\n      type: \"SET_SCREEN_SIZE\",\n      size: [window.innerWidth, window.innerHeight],\n    });\n  };\n\n  useEffect(() => {\n    if (state.imgCtx[state.name]) {\n      const img = state.imgCtx[state.name].img;\n      const size = getWidthHeight(img, state.screenSize);\n      const dotsCount = getDotsCount(size, size.width / 2);\n      dispatch({\n        type: \"SET_DOT_SIZE\",\n        dotSize: size.width / 2,\n      });\n      setDotWrapper(size.width, size.height);\n      makeInitDots(dotsCount);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [state.imgCtx[state.name], state.name, state.screenSize]);\n\n  useEffect(() => {\n    // when document is loaded, set screenSize state at once\n    onReSize();\n    window.addEventListener(\"resize\", onReSize);\n  }, []);\n\n  return (\n    <>\n      <CanvasImgWrapper\n        member={memberRef.current}\n        screenSize={state.screenSize}\n        dispatch={dispatch}\n      />\n      <div\n        id=\"main-wrapper\"\n        style={{ height: `${window.innerHeight - 125}px` }}\n      >\n        <div ref={dotWrapperRef} className=\"wrapper\" id=\"dot-wrapper\">\n          {state.initDotsCount.map((item: any) => (\n            <Dot\n              size={state.dotSize}\n              ctx={state.imgCtx[state.name].ctx}\n              key={item.toString()}\n              name={state.name}\n              wrapperSize={state.dotWrapperSize}\n            />\n          ))}\n        </div>\n      </div>\n      <ProfileWrapper\n        member={memberRef.current}\n        dispatch={dispatch}\n        name={state.name}\n      ></ProfileWrapper>\n    </>\n  );\n});\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import \"react-app-polyfill/ie11\";\nimport \"react-app-polyfill/stable\";\n\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}